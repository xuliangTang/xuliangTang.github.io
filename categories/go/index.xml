<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>go - Category - Lain Blog</title><link>http://xuliangtang.github.io/categories/go/</link><description>go - Category - Lain Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 02 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://xuliangtang.github.io/categories/go/" rel="self" type="application/rss+xml"/><item><title>数据包捕获库 gopacket</title><link>http://xuliangtang.github.io/posts/gopacket/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/gopacket/</guid><description>gopacket 包为用 C 编写的 libpcap 提供了一个 go 包装器，Libp­cap 提供的接口函数实现和封装了与数据包截获有关的过程，可以在绝大多数 Linux 平台上运行，主要的功</description></item><item><title>使用正向代理远程访问 k8s 服务</title><link>http://xuliangtang.github.io/posts/go-pod-proxy/</link><pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/go-pod-proxy/</guid><description>HTTP 原理：部署一个僵尸 Pod 正向代理 k8s 服务，通过暴露 NodePort 对外提供访问 func getRsp(request *http.Request) (*http.Response, error) { transport := http.DefaultTransport outReq := new(http.Request) *outReq = *request // 构建roundTrip rsp, err := transport.RoundTrip(outReq) if err != nil { return nil, err }</description></item><item><title>GO 使用 gRPC</title><link>http://xuliangtang.github.io/posts/grpc/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/grpc/</guid><description>gRPC 是一种现代化开源的高性能RPC框架，能够运行于任意环境之中。最初由谷歌进行开发。它使用HTTP/2作为传输协议 在 gRPC 里，客户端可以像调用本地</description></item><item><title>使用 Go 生成自签 CA 证书</title><link>http://xuliangtang.github.io/posts/go-ca-cert/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/go-ca-cert/</guid><description>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件 使用 Go 自签发证书 go 的 x509 标准库下有个 Certificate 结构，这个结构就是证书解析</description></item></channel></rss>