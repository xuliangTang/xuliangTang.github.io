<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Lain Blog</title><link>http://xuliangtang.github.io/posts/</link><description>All Posts | Lain Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 04 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://xuliangtang.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Istio 部署 gRPC 服务并配置网关证书</title><link>http://xuliangtang.github.io/posts/istio-grpc/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/istio-grpc/</guid><description>gRPC 环境 gRPC 是 Google公司基于 Protobuf 开发的跨语言的开源 RPC 框架。gRPC 基于 HTTP/2 协议设计，可以基于一个HTTP/2链接提供多个服务 安装 1. protobuf 从 protobuf 这里下</description></item><item><title>Istio 快速入门</title><link>http://xuliangtang.github.io/posts/istio/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/istio/</guid><description>Istio 是一个开源的微服务管理、保护和监控框架，它有如下特性： 流量管理：利用配置，我们可以控制服务间的流量。设置断路器、超时或重试都可以通过简单的</description></item><item><title>使用 Go 生成自签 CA 证书</title><link>http://xuliangtang.github.io/posts/go-ca-cert/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/go-ca-cert/</guid><description>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件 使用 Go 自签发证书 go 的 x509 标准库下有个 Certificate 结构，这个结构就是证书解析</description></item><item><title>k8s 远程进入容器 terminal</title><link>http://xuliangtang.github.io/posts/k8s-pod-shell/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/k8s-pod-shell/</guid><description>k8s 实现的“进入某个容器”的功能，底层本质是 Docker 容器通过 exec 进入容器的扩展。本质是新建了一个“与目标容器，共享 namespace 的”新的 shell 进程。所以该 shell 进程，看到</description></item><item><title>K8s list-watch 机制和 Informer 模块</title><link>http://xuliangtang.github.io/posts/k8s-list-watch/</link><pubDate>Sun, 18 Dec 2022 18:29:49 +0800</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/k8s-list-watch/</guid><description>在 Kubernetes 中，有5个主要的组件，分别是 master 节点上的 kube-api-server、kube-controller-manager 和 kube-sche</description></item><item><title>K8s client-go</title><link>http://xuliangtang.github.io/posts/k8s-go/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/k8s-go/</guid><description>client-go 是负责与 Kubernetes APIServer 服务进行交互的客户端库，利用 Client-Go 与 Kubernetes APIServer 进行的交互访问，来对 Kubernetes 中的各类资源对象进行管理操作，包括内置的资源对象及 CRD client-go 客户端 Client-Go 共提供</description></item><item><title>调度器 kube-schedule</title><link>http://xuliangtang.github.io/posts/kube-schedule/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/kube-schedule/</guid><description>Kube-scheduler 是 Kubernetes 集群默认的调度器，并且是控制面中一个核心组件。scheduler 通过 kubernetes 的监测（Watch）机制来发现集群中新创建且尚未被调度到 Node 上的 P</description></item><item><title>Pod 水平自动扩缩 — HPA</title><link>http://xuliangtang.github.io/posts/hpa/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/hpa/</guid><description>Horizontal Pod Autoscaling（Pod 水平自动伸缩），简称HPA。它可以基于 CPU 利用率或其他指标自动扩缩 ReplicationController</description></item><item><title>PV 和 PVC</title><link>http://xuliangtang.github.io/posts/pv_pvc/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/pv_pvc/</guid><description>为了能够屏蔽底层存储实现的细节，方便用户使用，k8s 引入 PV 和 PVC 两种资源对象。Persistent Volume 提供存储资源（并实现），Persisten</description></item><item><title>Service</title><link>http://xuliangtang.github.io/posts/service/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/service/</guid><description>在 Kubernetes 中，pod 是应用程序的载体，我们可以通过 pod 的 ip 来访问应用程序，但是 pod 的 ip 地址不是固定的，这也就意味着不方便直接采用 pod 的 ip 对服务进行访问 为</description></item></channel></rss>