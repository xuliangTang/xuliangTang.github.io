<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Lain Blog</title><link>http://xuliangtang.github.io/</link><description>This is my cool site</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 03 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://xuliangtang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>kubectl exec 原理</title><link>http://xuliangtang.github.io/posts/kubectl-exec/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/kubectl-exec/</guid><description>执行 kubectl exec 时，首先 kubectl 会向 apiserver 发起 GET 和 POST 请求，apiserver 返回 101 Upgrade 响应，向客户端表示已经升级到 SPDY 协议 随后由 apiserver 向 pod 所在节点上的 kubelet 发送流式请求 /</description></item><item><title>runC 与容器运行时</title><link>http://xuliangtang.github.io/posts/runc/</link><pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/runc/</guid><description>RunC 是用来运行容器的一个轻量级工具。被称为运行容器的运行时，它负责利用符合标准的文件 OCI（Open Container Initiative）标准等资源运行容器</description></item><item><title>Linux 资源管理之 cgroup</title><link>http://xuliangtang.github.io/posts/linux_cgroup/</link><pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/linux_cgroup/</guid><description>cgroup 是 Linux kernel 的一项功能：它是在一个系统中运行的层级制进程组，你可对其进行资源分配（如 CPU 时间、系统内存、网络带宽或者这些资源的组合）。通过使用 cg</description></item><item><title>Linux Namespace 机制</title><link>http://xuliangtang.github.io/posts/linux_ns/</link><pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/linux_ns/</guid><description>Linux Namespace 提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的 Namespace 中，来实现资源隔离的目的。不同 Namespace 的程序，可以享有一份独立的系统资源</description></item><item><title>GitOps 持续部署工具 Argo CD</title><link>http://xuliangtang.github.io/posts/argocd/</link><pubDate>Fri, 07 Apr 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/argocd/</guid><description>Argo CD 是以 Kubernetes 作为基础设施，遵循声明式 GitOps 理念的持续交付（continuous delivery, CD）工具，支持多种配置管理工具，包括 ksonnet/jsonne</description></item><item><title>原生 CI/CD 框架 Tekton</title><link>http://xuliangtang.github.io/posts/tekton/</link><pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/tekton/</guid><description>Tekton 是一款功能非常强大而灵活的 CI/CD 开源的云原生框架。Tekton 的前身是 Knative 项目的 build-pipeline 项目，这个项目是为了给 build 模块增加 pipeline 的功能，但是随着不同的功能加</description></item><item><title>使用正向代理远程访问 k8s 服务</title><link>http://xuliangtang.github.io/posts/go-pod-proxy/</link><pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/go-pod-proxy/</guid><description>HTTP 原理：部署一个僵尸 Pod 正向代理 k8s 服务，通过暴露 NodePort 对外提供访问 func getRsp(request *http.Request) (*http.Response, error) { transport := http.DefaultTransport outReq := new(http.Request) *outReq = *request // 构建roundTrip rsp, err := transport.RoundTrip(outReq) if err != nil { return nil, err }</description></item><item><title>GO 使用 gRPC</title><link>http://xuliangtang.github.io/posts/grpc/</link><pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/grpc/</guid><description>gRPC 是一种现代化开源的高性能RPC框架，能够运行于任意环境之中。最初由谷歌进行开发。它使用HTTP/2作为传输协议 在 gRPC 里，客户端可以像调用本地</description></item><item><title>自定义 POD 调度 Scheduling Framework</title><link>http://xuliangtang.github.io/posts/scheduling-framework/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/scheduling-framework/</guid><description>kube-scheduler 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用</description></item><item><title>Fluent Bit 日志收集</title><link>http://xuliangtang.github.io/posts/fluent-bit/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><author>xuliangTang</author><guid>http://xuliangtang.github.io/posts/fluent-bit/</guid><description>fluent-bit 是一种在 Linux，OSX 和 BSD 系列操作系统运行，兼具快速、轻量级日志处理器和转发器。它非常注重性能，通过简单的途径从不同来源收集日志事件 数</description></item></channel></rss>